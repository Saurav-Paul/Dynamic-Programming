// 0/1 Knapsack Problem
// Maximizing price by not taking more than weight W
// Tabulation Technique
// Time Complexity O(N*W)
// Row of dp table should be N and Column of dp table should b W
#include <iostream>
#include <vector>
using namespace std;
#define mx 1000
int price[mx],weight[mx],dp[mx][mx];
vector <int> sol;
int solve(int N,int W)
{
    for(int i=0;i<=N;i++)
    {
        for(int w=0;w<=W;w++)
        {
            if(i==0||w==0) dp[i][w]=0;
            else if(weight[i]<=w) dp[i][w] = max (price[i]+dp[i-1][w-weight[i]],dp[i-1][w]);
            else dp[i][w]=dp[i-1][w];
        }
    }
    return dp[N][W];
}
void solution_print(int i,int k)
{
    while(i>0&&k>0)
    {
        if(dp[i][k]!=dp[i-1][k])
        {
            sol.push_back(i); // Mark the item that must take
            k=k-weight[i];
        }
        i=i-1;
    }
}
int main()
{
    int N,W; // N is the number of items and W is maximum weight
    cin>>N>>W;
    for(int i=1;i<=N;i++) cin>>price[i]>>weight[i];
    cout<<solve(N,W)<<endl;
    // Print Solution
    // Taking which items that makes maximizing price
    solution_print(N,W);
    for(int i=0;i<sol.size();i++) cout<<sol[i]<<" ";
    return 0;
}
