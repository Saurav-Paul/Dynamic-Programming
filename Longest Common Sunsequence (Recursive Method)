// Longest Common Subsequence Dynamic Problem
// Given two string . Find the longest common subsequence between them .
// Recursive Method
// PrintSolutionAll function works bt Backtracking Algorithm
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
#define mx 2000
#define memo(a,b) memset(a,b,sizeof(a))
char A[mx+10],B[mx+10];
int dp[mx+10][mx+10];
int siz1,siz2;
string ans;
int solve(int m,int n)
{
    if(m>siz1||n>siz2) return 0;
    int &ret = dp[m][n];
    if(ret!=-1) return ret;
    if(A[m-1]==B[n-1]) return ret = 1+solve(m+1,n+1);
    else return ret = max(solve(m+1,n),solve(m,n+1));
}
void printSolution(int m,int n)
{
    if(m>siz1||n>siz2)
    {
        cout<<ans<<"\n";
        return;
    }
    if(A[m-1]==B[n-1])
    {
        ans=ans+A[m-1];
        printSolution(m+1,n+1);
    }
    else
    {
        if(dp[m+1][n]>dp[m][n+1])
        {
            printSolution(m+1,n);
        }
        else
        {
            printSolution(m,n+1);
        }
    }
}
void printSolutionAll(int m,int n)
{
    if(m>siz1||n>siz2)
    {
        cout<<ans<<"\n";
        return;
    }
    if(A[m-1]==B[n-1])
    {
        ans=ans+A[m-1];
        printSolutionAll(m+1,n+1);
        ans.erase(ans.end()-1);
    }
    else
    {
        if(dp[m+1][n]>dp[m][n+1])
        {
            printSolutionAll(m+1,n);
        }
        else if(dp[m+1][n]<dp[m][n+1])
        {
            printSolutionAll(m,n+1);
        }
        else
        {
            printSolutionAll(m+1,n);
            printSolutionAll(m,n+1);
        }
    }
}
int main()
{
    scanf("%s%s",&A,&B);
    memo(dp,-1);
    siz1=strlen(A);siz2=strlen(B);
    printf("%d\n",solve(1,1));
    printSolution(1,1); // Print any solution
    ans.clear();
    printSolutionAll(1,1); // Print all solutions
    return 0;
}
