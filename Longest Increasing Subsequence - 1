// Longest Increasing Subsequence
// Dynamic Problem
// Time Complexity O(N^2)
// N -> Number of elements
#include <cstdio>
#include <iostream>
using namespace std;
#define mx 100
int LIS[mx],seq[mx],sol[mx];
int solve(int N)
{
    for(int i=1;i<=N;i++) LIS[i]=1;
    int ans=1;
    for(int i=1;i<=N;i++)
    {
        for(int j=i+1;j<=N;j++)
        {
            if(seq[i]<seq[j]&&LIS[j]<LIS[i]+1)
            {
                LIS[j]=LIS[i]+1;
                ans=max(ans,LIS[j]);
            }
        }
    }
    return ans;
}
void printSolution(int N,int lis)
{
    int temp = lis;
    while(N>0)
    {
        if(LIS[N]==temp)
        {
            sol[temp--]=seq[N];
        }
        N--;
    }
    for(int i=1;i<=lis;i++) printf("%d ",sol[i]);
}
int main()
{
    int N; // N is the number of elements
    scanf("%d",&N);
    for(int i=1;i<=N;i++) scanf("%d",&seq[i]);
    int ans = solve(N);
    printf("%d\n",ans);
    printSolution(N,ans);
    return 0;
}
/*
10
8 1 9 8 3 4 6 1 5 2
*/
/*
4
1 3 4 5
*/
